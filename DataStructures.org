* Introduction to single linked lists
** Video Notes
   - Elements of a linked list are called nodes
   - Nodes are self-referential ( they refer to a node of same type )
   - Linked lists are useful for dynamically creating data structures
   - Linked lists start with a pointer called head( similar to name of the array )
** Doubts
*** TODO Clarify & Remember Precedence of Operators
*** FINISHED Clarify pointer operators like ->, ., &, *
    CLOSED: [2020-07-13 Mon 10:18]
    - There are Elements: variables, structures, arrays etc...
    - Pointers are like variable names in that they can refer to the value of the variable and assign a new value
    - When refering to a variable's value, you have to prepend '*' to the name of the pointer
    - That's it. That's all you have to remember. A pointer's as good as a variable name
    - A pointer can point to another pointer -> This is where it might get complicated
* Traversing a single linked list
** Video Notes
   - Data Structures are generally made of Structures?
   - If you lose the address of the node, you lose the node
   - 
*** Operations on a Data Structure
    - Traversing
    - Inserting
    - Deleting
    - Searching

* Inserting an Element in SLL
** Video Notes
  - sizeof() is not a function, it's an operator
  - Pass this argument to malloc for creating a new node -> sizeof(struct node)
  - malloc returns a (void *) address which you should type cast to (stuct node *)
*** Insertion
    - Inserting at the beginning
    - Inserting at the end
    - Inserting between nodes

* Deleting a node from SLL
** Video Notes
   - Deleting a node is just losing the address
   - But we also want to free up the space taken by the node
   - We do that by passing the address of the node to free(struct node *)
   - Deleting the HEAD
   - Deleting the TAIL
   - Deleting any node
* Printing the elements of SLL using recursion
** Video Notes
   - The program could be smaller if you use recursion
   - Post-Recursion: This way you can print data in the reverse order( which might be difficult in an SLL if you don't use recursion )
   - Pre-Recursion: This way you can print from start to end

* Reversing an SLL using an iterative program
** Video Notes
   - Reversing SLL: Exchange HEAD and TAIL
   - You have to use three pointers to hold CurrentNode, PreviousNode and NextNode
* Recursive program for reversing an SLL
** Video Notes
   - No Notes
* Circular linked list
** Video Notes
   - In an SLL you have to start from HEAD to traverse the list( you can't go back in an SLL )
   - In CLL, you can start anywhere to traverse the list( you still can't go back )
   - In order to not fall in an infinite-loop, you introduce a node called sentinel node
* Insertion into doubly linked list
** Video Notes
   - It's not Hard
   - Just think
* Introduction to Stacks
** Video Notes
   - Last In, First Out
   - Like Stacked Plates
*** Applications of Stack
    - Recursion
    - Infix, PostFix Conversion
    - Parsing
    - Browser history in a Tab
    - Undo, Redo in editors
    - Tree & Graph Traversing
* Implementation of stacks using arrays
** Video Notes
   - You will need a 'top' variable to track the top of the stack - the top is -1 for an empty stack
   - Limitaion of Arrays: We have to predict the size of the array
   - In this implementation, we don't need to delete a node when we pop
   - We just have to change the 'top' variable
   - For operations on stack(or other data structures) check for 'overflow' & 'underflow'
*** Operations on Stack
    - Push
    - Pop
* Linked list implementation of stack
** Video Notes
   - Pushing and Popping will take O(1) time - in both arrays and linked lists
   - Because we can't go back in an SLL we push and pop at the HEAD node
   - Sometimes malloc might return a NULL pointer if the memory is unavailable - you have to check for that possibility in your programs
   - We free memory in after popping in linked lists
   - Malloc returns a void pointer - you might want to type cast that pointer
   - Malloc returns memory from the Heap
     
* Implementation of a Queue using a Circular arrays
** Video Notes
   - You use 2 pointers to keep track of the queue
   - front and rear
   - When you Enqueue nodes, rear increases
   - When you Dequeue nodes, front decreases
   - You use arrays in this implementation
   - But you think of the array as a circular one
   - In circular array always leave one empty space that front points to
   - The space that front points to is the space that is last emptied(Dequeued)
   - You have to know the conditions for 'Overflow' and 'Underflow'
   - Overflow -> (rear+1)/modn == front
   - Underflow -> front == rear
*** Operations on a Queue
    - Enqueue -> Adding Nodes
    - Dequeue -> Deleting Nodes

* Implementation of a Queue using 2 stacks
** Video Notes
   - To implement a Queue using 2 stacks
   - you need to reverse the order of popping
   - but also there should be no inserts into stack-2 before emptying it
* Implementation of a Queue using 1 stack
** Video Notes
   - Same concept
   - instead of using another stack to reverse the order
   - use the same stack to reverse using 'reverse' operation on the stack
* Infix to Postfix Conversion Algorithm
** Video Notes
   * We use the 'stack' data structure
   * Infix operators lie between operands as opposed to lying outside the operators
   * We only push operators into the stack - not the operands
   * Operator precedence matters in this algorithm
   * This what the Algorithm does: Converts an expression using infix-operators to an expression using outfix operators
   * I wonder who gives a shit about infix & outfix operators
   * Algorithm:
   * Read the expression from left to right
   * If the character is an operand print it
   * If the character is an operator push it to the stack
   * But only if the operator on the top of the stack has lower precedence than the one about to be pushed
   * If the operator that's about to be pushed has lower precedence, the pop the stack until you can push it
   * (Popping means printing and popping)
   * Remember this operator precedence:
   * + < (
   * ( < +
* Postfix Evaluation Algorithm
** Video Notes
   - We use Postfix notation to evaluate the expression in one go - otherwise we have to evaluate it recursively
   - Algorithm:
   - Here we push operands onto the stack from left to right
   - When we encounter operators pop the 1 or 2 operators depending on whether it's a unary or binary operator
   - Evaluate that and push back the result
   - Keep doing that until the whole expression is evaluated
* Introduction to Tree Traversals
** Video Notes
   - Binary Tree: Any tree that has more than 2 nodes
   - Traversing: Explore what's in every element
   - Searching: Look for an element
   - Inorder Traversing: Visit all the Left nodes first and Root nodes next
   - Preorder Traversing: Visit all the Root nodes first and Left nodes next
   - Postorder Traversing: Visit all the Left nodes first and Right nodes next
   - Traversing is Basically 'Walking' all over the tree meeting all the elements
   - Watch the video again - there are some tricks
   - Trick: Give all the nodes dummy nodes - Pre -> print the node for 1st time - In -> print the node when you visit the 2nd time - Post -> print the node when you visit the node for the 3rd time
* Implementation of Traversals & Time-Space Analysis
** Video Notes
   - A Tree node has 2 pointers for holding left & right nodes
   - Algorithm for Inorder Traversal:
   - Remember to add dummy-nodes for solving problems

----------------------------
struct node
{
  char data;
  struct node *left, *right;
}

void TraverseInOrder(struct node *t)
{
  if (t)
  {
    TraverseInOrder(*left);
    printf("%c", t->data);
    TraverseInOrder(*right);
  }
}

// You can change the order to change the Algorithm to Postfix or Prefix

---------------------------
* Double Order Traversal
** Video Notes
   - Watch the Video
   - This is a trick to do traversals using recursions easily
* Triple Order Traversal
** Video Notes
   - Triple order means printing 2 times and in between printing we visit other nodes
   - Same goes for double order
* Indirect Recursion on Trees
** Video Notes
   - If 2 functions A & B behave like this => A calls B -> Now B calls A <= this is called Indirect Recursion
* Number of Binary Trees Possible
** Video Notes
   - n -> No. of nodes
   - Number of Binary Trees Possible => (2ncn)[n!]/(n+1) // use the factorial if labelling is possible
* Number of Binary Trees Possible Labelled & Unlabelled
** Video Notes
   - Given a order(pre, in, post), can you construct the possible trees
   - Given 2 orders, more than 1 btrees are possible
   - Given 3 orders, only one tree is possible
* Construction of Unique Binary tree using Inorder & Preorder
** Video Notes
   - By using the order, we deduce the root and children
   - If ABC is a preorder - A is the root
   - If ABC is a inorder - B is the root
   - Watch the Video - there are tricks
* Recursive Program to Count the number of Nodes
** Video Notes
   - Using recursion count the number of nodes
   - this is the code: 1 + NN(left subtree) + NN(right subtree)
   - where NN is the function that's called recursively
* Recursive Program to Count the number of Leaves & NonLeaves
** Video Notes
   - A leaf has both right & left child as NULL
   - Solve this using recursion
* Recursive program to find the full nodes
** Video Notes
   - Full node has all the children(left & right)
   - Watch the video for reviewing the code
